Making predictions
========================================
css: custom.css
transition: none

```{r setup, include=FALSE}
library(knitr)
library(magrittr)
library(viridis)
library(ggplot2)
library(reshape2)
library(dsm)
library(animation)
opts_chunk$set(cache=TRUE, echo=FALSE)
```


```{r initialmodeletc, echo=FALSE, message=FALSE, warning=FALSE}
load("../spermwhaledata/R_import/spermwhale.RData")
library(Distance)
library(dsm)
df_hr <- ds(dist, truncation=6000, key="hr")
dsm_tw_xy_depth <- dsm(count ~ s(x, y) + s(Depth), ddf.obj=df_hr, observation.data=obs, segment.data=segs, family=tw())
# fit a quick model from previous exericises
dsm_all_tw_rm <- dsm(count~s(x, y, bs="ts") +
                           s(Depth, bs="ts"),
                     ddf.obj=df_hr,
                     segment.data=segs, observation.data=obs,
                     family=tw(), method="REML")
```


So far...
==========

- Build, check & select models for detectability
- Build, check & select models for abundance
- Make some ecological inference about smooths
- **what about predictions**



What predictions do we want to make?
=====================================

- Abundance estimates
- Maps of abundance
- These are related

Let's talk about maps
======================
type:section

What does a map mean?
======================

- Grids!
- Each cell is an abundance estimate
- Whole map is a "snapshot"
- Sum all the cells to get the overall abundance
- Sum a subset to get a stratified estimate

Going back to the formula
==================

(Count) Model:

$$
n_j = A_j\hat{p}_j \exp\left[ \beta_0 + s(\text{y}_j) + s(\text{Depth}_j) \right] + \epsilon_j
$$

Predictions (index $r$):

$$
n_r = A_r \exp\left[ \beta_0 + s(\text{y}_r) + s(\text{Depth}_r) \right]
$$

Need to "fill-in" values for $A_r$, $\text{y}_r$ and $\text{Depth}_r$.


Predicting
============

- With these values can use `predict` in R
- `predict(model, newdata=data)`




Prediction data
================

```{r preddata}
head(predgrid)
```

A quick word about rasters
==========================

- We have talked about rasters a bit
- In R, the `data.frame` is king
- Fortunately `as.data.frame` exists
- Make our "stack" and then convert to `data.frame`


Predictors
========================

```{r preddata-plot, fig.width=15, fig.height=7}
library(gridExtra)
p1 <- ggplot(predgrid[,c("x","y","Depth")]) +
      geom_tile(aes(x=x,y=y,fill=Depth)) +
      scale_fill_viridis() +
      coord_equal()
p2 <- ggplot(predgrid[,c("x","y","NPP")]) +
      geom_tile(aes(x=x,y=y,fill=NPP)) +
      scale_fill_viridis() +
      coord_equal()
p3 <- ggplot(predgrid[,c("x","y","SST")]) +
      geom_tile(aes(x=x,y=y,fill=SST)) +
      scale_fill_viridis() +
      coord_equal()
grid.arrange(p1, p2, p3, ncol=3,nrow=1)
```


Making a prediction
====================

- Add another column to the prediction data
- Plotting then easier (in R)

```{r predictions, echo=TRUE}
predgrid$Nhat_tw <- predict(dsm_all_tw_rm, predgrid)
```


Maps of predictions
====================
left: 45%

```{r predmap}
p <- ggplot(predgrid) +
      geom_tile(aes(x=x, y=y, fill=Nhat_tw)) +
      scale_fill_viridis() +
      theme_minimal() +
      theme(legend.position="bottom") +
      coord_equal()
print(p)
```

***

```{r echo=TRUE, eval=FALSE}
p <- ggplot(predgrid) +
      geom_tile(aes(x=x, y=y,
                    fill=Nhat_tw)) +
      scale_fill_viridis() +
      coord_equal()
print(p)
```


Total abundance
====================

Each cell has an abundance, sum to get total

```{r total-abund, echo=TRUE}
sum(predict(dsm_all_tw_rm, predgrid))
```

Subsetting
============

R subsetting lets you calculate "interesting" estimates:

```{r subset-abund, echo=TRUE}
# how many sperm whales at depths less than 2500m?
sum(predgrid$Nhat_tw[predgrid$Depth < 2500])
# how many sperm whales North of 0?
sum(predgrid$Nhat_tw[predgrid$x>0])
```


Extrapolation
================
type:section

blah
===========
title:none

<div class="bigq">
DANGER WILL ROBINSON, DANGER
</div>

What do we mean by extrapolation?
==================================

- Predicting at values outside those observed
- What does "outside" mean?
  - between transects?
  - outside "survey area"?

***

```{r loadtracks, results="hide"}
library(rgdal)
tracksEN <- readOGR("../spermwhaledata/rawdata/Analysis.gdb", "EN_Trackline1")
tracksGU <- readOGR("../spermwhaledata/rawdata/Analysis.gdb", "GU_Trackline")
```
```{r plottracks}
library(ggplot2)
tracksEN <- fortify(tracksEN)
tracksGU <- fortify(tracksGU)
mapdata <- map_data("world2","usa")
p_maptr <- ggplot()+
      geom_path(aes(x=long,y=lat, group=group), colour="red", data=tracksEN) + 
      geom_path(aes(x=long,y=lat, group=group), colour="blue", data=tracksGU)+
      theme_minimal() +
      geom_polygon(aes(x=long,y=lat, group=group), data=mapdata)+
      coord_map(xlim=range(tracksEN$long, tracksGU$long)+c(-1,1),
                ylim=range(tracksEN$lat, tracksGU$lat)+c(-1,1))
print(p_maptr)
```


Temporal extrapolation
========================

- Models are temporally implicit (mostly)
- Dynamic variables change seasonally
- Migration can be an issue
- Need to understand what the predictions **are**

Extrapolation
==============

- Extrapolation is fraught with issues
- Want to be predicting "inside the rug"
- In general, try not to do it!
- (See variance lecture next!)

Recap
======

* Using `predict`
* Getting "overall" abundance
* Subsetting
* Plotting in R
* Extrapolation (and its dangers)
